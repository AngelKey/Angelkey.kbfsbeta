// Automatically generated by MockGen. DO NOT EDIT!
// Source: interfaces.go

package libkbfs

import (
	fmt "fmt"
	gomock "github.com/golang/mock/gomock"
	libkb "github.com/keybase/client/go/libkb"
	logger "github.com/keybase/client/go/logger"
	protocol "github.com/keybase/client/go/protocol"
	rpc2 "github.com/maxtaco/go-framed-msgpack-rpc/rpc2"
	go_metrics "github.com/rcrowley/go-metrics"
	context "golang.org/x/net/context"
	reflect "reflect"
	time "time"
)

// Mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockRecorder
}

// Recorder for MockBlock (not exported)
type _MockBlockRecorder struct {
	mock *MockBlock
}

func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &_MockBlockRecorder{mock}
	return mock
}

func (_m *MockBlock) EXPECT() *_MockBlockRecorder {
	return _m.recorder
}

// Mock of BlockContext interface
type MockBlockContext struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockContextRecorder
}

// Recorder for MockBlockContext (not exported)
type _MockBlockContextRecorder struct {
	mock *MockBlockContext
}

func NewMockBlockContext(ctrl *gomock.Controller) *MockBlockContext {
	mock := &MockBlockContext{ctrl: ctrl}
	mock.recorder = &_MockBlockContextRecorder{mock}
	return mock
}

func (_m *MockBlockContext) EXPECT() *_MockBlockContextRecorder {
	return _m.recorder
}

func (_m *MockBlockContext) GetCreator() protocol.UID {
	ret := _m.ctrl.Call(_m, "GetCreator")
	ret0, _ := ret[0].(protocol.UID)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetCreator() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCreator")
}

func (_m *MockBlockContext) GetWriter() protocol.UID {
	ret := _m.ctrl.Call(_m, "GetWriter")
	ret0, _ := ret[0].(protocol.UID)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriter")
}

func (_m *MockBlockContext) GetRefNonce() BlockRefNonce {
	ret := _m.ctrl.Call(_m, "GetRefNonce")
	ret0, _ := ret[0].(BlockRefNonce)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetRefNonce() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRefNonce")
}

// Mock of NodeID interface
type MockNodeID struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeIDRecorder
}

// Recorder for MockNodeID (not exported)
type _MockNodeIDRecorder struct {
	mock *MockNodeID
}

func NewMockNodeID(ctrl *gomock.Controller) *MockNodeID {
	mock := &MockNodeID{ctrl: ctrl}
	mock.recorder = &_MockNodeIDRecorder{mock}
	return mock
}

func (_m *MockNodeID) EXPECT() *_MockNodeIDRecorder {
	return _m.recorder
}

func (_m *MockNodeID) ParentID() NodeID {
	ret := _m.ctrl.Call(_m, "ParentID")
	ret0, _ := ret[0].(NodeID)
	return ret0
}

func (_mr *_MockNodeIDRecorder) ParentID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ParentID")
}

// Mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeRecorder
}

// Recorder for MockNode (not exported)
type _MockNodeRecorder struct {
	mock *MockNode
}

func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &_MockNodeRecorder{mock}
	return mock
}

func (_m *MockNode) EXPECT() *_MockNodeRecorder {
	return _m.recorder
}

func (_m *MockNode) GetID() NodeID {
	ret := _m.ctrl.Call(_m, "GetID")
	ret0, _ := ret[0].(NodeID)
	return ret0
}

func (_mr *_MockNodeRecorder) GetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetID")
}

func (_m *MockNode) GetFolderBranch() FolderBranch {
	ret := _m.ctrl.Call(_m, "GetFolderBranch")
	ret0, _ := ret[0].(FolderBranch)
	return ret0
}

func (_mr *_MockNodeRecorder) GetFolderBranch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFolderBranch")
}

func (_m *MockNode) GetBasename() string {
	ret := _m.ctrl.Call(_m, "GetBasename")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockNodeRecorder) GetBasename() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBasename")
}

// Mock of KBFSOps interface
type MockKBFSOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKBFSOpsRecorder
}

// Recorder for MockKBFSOps (not exported)
type _MockKBFSOpsRecorder struct {
	mock *MockKBFSOps
}

func NewMockKBFSOps(ctrl *gomock.Controller) *MockKBFSOps {
	mock := &MockKBFSOps{ctrl: ctrl}
	mock.recorder = &_MockKBFSOpsRecorder{mock}
	return mock
}

func (_m *MockKBFSOps) EXPECT() *_MockKBFSOpsRecorder {
	return _m.recorder
}

func (_m *MockKBFSOps) GetFavorites(ctx context.Context) ([]*Favorite, error) {
	ret := _m.ctrl.Call(_m, "GetFavorites", ctx)
	ret0, _ := ret[0].([]*Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetFavorites(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavorites", arg0)
}

func (_m *MockKBFSOps) GetOrCreateRootNodeForHandle(ctx context.Context, handle *TlfHandle, branch BranchName) (Node, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "GetOrCreateRootNodeForHandle", ctx, handle, branch)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) GetOrCreateRootNodeForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOrCreateRootNodeForHandle", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) GetRootNode(ctx context.Context, folderBranch FolderBranch) (Node, DirEntry, *TlfHandle, error) {
	ret := _m.ctrl.Call(_m, "GetRootNode", ctx, folderBranch)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(*TlfHandle)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockKBFSOpsRecorder) GetRootNode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRootNode", arg0, arg1)
}

func (_m *MockKBFSOps) GetDirChildren(ctx context.Context, dir Node) (map[string]EntryType, error) {
	ret := _m.ctrl.Call(_m, "GetDirChildren", ctx, dir)
	ret0, _ := ret[0].(map[string]EntryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetDirChildren(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDirChildren", arg0, arg1)
}

func (_m *MockKBFSOps) Lookup(ctx context.Context, dir Node, name string) (Node, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "Lookup", ctx, dir, name)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Lookup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lookup", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Stat(ctx context.Context, node Node) (DirEntry, error) {
	ret := _m.ctrl.Call(_m, "Stat", ctx, node)
	ret0, _ := ret[0].(DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Stat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stat", arg0, arg1)
}

func (_m *MockKBFSOps) CreateDir(ctx context.Context, dir Node, name string) (Node, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "CreateDir", ctx, dir, name)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDir", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) CreateFile(ctx context.Context, dir Node, name string, isEx bool) (Node, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "CreateFile", ctx, dir, name, isEx)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFile", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) CreateLink(ctx context.Context, dir Node, fromName string, toPath string) (DirEntry, error) {
	ret := _m.ctrl.Call(_m, "CreateLink", ctx, dir, fromName, toPath)
	ret0, _ := ret[0].(DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) CreateLink(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLink", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) RemoveDir(ctx context.Context, dir Node, dirName string) error {
	ret := _m.ctrl.Call(_m, "RemoveDir", ctx, dir, dirName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RemoveDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDir", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) RemoveEntry(ctx context.Context, dir Node, name string) error {
	ret := _m.ctrl.Call(_m, "RemoveEntry", ctx, dir, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RemoveEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveEntry", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Rename(ctx context.Context, oldParent Node, oldName string, newParent Node, newName string) error {
	ret := _m.ctrl.Call(_m, "Rename", ctx, oldParent, oldName, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Rename(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKBFSOps) Read(ctx context.Context, file Node, dest []byte, off int64) (int64, error) {
	ret := _m.ctrl.Call(_m, "Read", ctx, file, dest, off)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Read(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Write(ctx context.Context, file Node, data []byte, off int64) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, file, data, off)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Truncate(ctx context.Context, file Node, size uint64) error {
	ret := _m.ctrl.Call(_m, "Truncate", ctx, file, size)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Truncate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SetEx(ctx context.Context, file Node, ex bool) error {
	ret := _m.ctrl.Call(_m, "SetEx", ctx, file, ex)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SetEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEx", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SetMtime(ctx context.Context, file Node, mtime *time.Time) error {
	ret := _m.ctrl.Call(_m, "SetMtime", ctx, file, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SetMtime(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMtime", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Sync(ctx context.Context, file Node) error {
	ret := _m.ctrl.Call(_m, "Sync", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sync", arg0, arg1)
}

func (_m *MockKBFSOps) Status(ctx context.Context, folderBranch FolderBranch) (FolderBranchStatus, <-chan StatusUpdate, error) {
	ret := _m.ctrl.Call(_m, "Status", ctx, folderBranch)
	ret0, _ := ret[0].(FolderBranchStatus)
	ret1, _ := ret[1].(<-chan StatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0, arg1)
}

func (_m *MockKBFSOps) UnstageForTesting(ctx context.Context, folderBranch FolderBranch) error {
	ret := _m.ctrl.Call(_m, "UnstageForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) UnstageForTesting(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnstageForTesting", arg0, arg1)
}

func (_m *MockKBFSOps) RekeyForTesting(ctx context.Context, folderBranch FolderBranch) error {
	ret := _m.ctrl.Call(_m, "RekeyForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RekeyForTesting(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RekeyForTesting", arg0, arg1)
}

func (_m *MockKBFSOps) SyncFromServer(ctx context.Context, folderBranch FolderBranch) error {
	ret := _m.ctrl.Call(_m, "SyncFromServer", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SyncFromServer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFromServer", arg0, arg1)
}

func (_m *MockKBFSOps) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKBFSOpsRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of KeybaseDaemon interface
type MockKeybaseDaemon struct {
	ctrl     *gomock.Controller
	recorder *_MockKeybaseDaemonRecorder
}

// Recorder for MockKeybaseDaemon (not exported)
type _MockKeybaseDaemonRecorder struct {
	mock *MockKeybaseDaemon
}

func NewMockKeybaseDaemon(ctrl *gomock.Controller) *MockKeybaseDaemon {
	mock := &MockKeybaseDaemon{ctrl: ctrl}
	mock.recorder = &_MockKeybaseDaemonRecorder{mock}
	return mock
}

func (_m *MockKeybaseDaemon) EXPECT() *_MockKeybaseDaemonRecorder {
	return _m.recorder
}

func (_m *MockKeybaseDaemon) Identify(ctx context.Context, assertion string) (UserInfo, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion)
	ret0, _ := ret[0].(UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) Identify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1)
}

func (_m *MockKeybaseDaemon) CurrentUID(ctx context.Context, sessionID int) (protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "CurrentUID", ctx, sessionID)
	ret0, _ := ret[0].(protocol.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) CurrentUID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentUID", arg0, arg1)
}

func (_m *MockKeybaseDaemon) CurrentSession(ctx context.Context, sessionID int) (SessionInfo, error) {
	ret := _m.ctrl.Call(_m, "CurrentSession", ctx, sessionID)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) CurrentSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentSession", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FavoriteAdd(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseDaemonRecorder) FavoriteAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteAdd", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FavoriteDelete(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseDaemonRecorder) FavoriteDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteDelete", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FavoriteList(ctx context.Context, sessionID int) ([]protocol.Folder, error) {
	ret := _m.ctrl.Call(_m, "FavoriteList", ctx, sessionID)
	ret0, _ := ret[0].([]protocol.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) FavoriteList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteList", arg0, arg1)
}

func (_m *MockKeybaseDaemon) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKeybaseDaemonRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of KBPKI interface
type MockKBPKI struct {
	ctrl     *gomock.Controller
	recorder *_MockKBPKIRecorder
}

// Recorder for MockKBPKI (not exported)
type _MockKBPKIRecorder struct {
	mock *MockKBPKI
}

func NewMockKBPKI(ctrl *gomock.Controller) *MockKBPKI {
	mock := &MockKBPKI{ctrl: ctrl}
	mock.recorder = &_MockKBPKIRecorder{mock}
	return mock
}

func (_m *MockKBPKI) EXPECT() *_MockKBPKIRecorder {
	return _m.recorder
}

func (_m *MockKBPKI) GetCurrentToken(ctx context.Context) (string, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentToken", arg0)
}

func (_m *MockKBPKI) GetCurrentUID(ctx context.Context) (protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentUID", ctx)
	ret0, _ := ret[0].(protocol.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentUID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentUID", arg0)
}

func (_m *MockKBPKI) GetCurrentCryptPublicKey(ctx context.Context) (CryptPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentCryptPublicKey", ctx)
	ret0, _ := ret[0].(CryptPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentCryptPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentCryptPublicKey", arg0)
}

func (_m *MockKBPKI) ResolveAssertion(ctx context.Context, input string) (protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "ResolveAssertion", ctx, input)
	ret0, _ := ret[0].(protocol.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) ResolveAssertion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResolveAssertion", arg0, arg1)
}

func (_m *MockKBPKI) GetNormalizedUsername(ctx context.Context, uid protocol.UID) (libkb.NormalizedUsername, error) {
	ret := _m.ctrl.Call(_m, "GetNormalizedUsername", ctx, uid)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetNormalizedUsername(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNormalizedUsername", arg0, arg1)
}

func (_m *MockKBPKI) HasVerifyingKey(ctx context.Context, uid protocol.UID, verifyingKey VerifyingKey) error {
	ret := _m.ctrl.Call(_m, "HasVerifyingKey", ctx, uid, verifyingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) HasVerifyingKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasVerifyingKey", arg0, arg1, arg2)
}

func (_m *MockKBPKI) GetCryptPublicKeys(ctx context.Context, uid protocol.UID) ([]CryptPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCryptPublicKeys", ctx, uid)
	ret0, _ := ret[0].([]CryptPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCryptPublicKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCryptPublicKeys", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteAdd(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) FavoriteAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteAdd", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteDelete(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) FavoriteDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteDelete", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteList(ctx context.Context) ([]protocol.Folder, error) {
	ret := _m.ctrl.Call(_m, "FavoriteList", ctx)
	ret0, _ := ret[0].([]protocol.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) FavoriteList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteList", arg0)
}

// Mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyManagerRecorder
}

// Recorder for MockKeyManager (not exported)
type _MockKeyManagerRecorder struct {
	mock *MockKeyManager
}

func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &_MockKeyManagerRecorder{mock}
	return mock
}

func (_m *MockKeyManager) EXPECT() *_MockKeyManagerRecorder {
	return _m.recorder
}

func (_m *MockKeyManager) GetTLFCryptKeyForEncryption(ctx context.Context, md *RootMetadata) (TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForEncryption", ctx, md)
	ret0, _ := ret[0].(TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForEncryption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForEncryption", arg0, arg1)
}

func (_m *MockKeyManager) GetTLFCryptKeyForMDDecryption(ctx context.Context, md *RootMetadata) (TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForMDDecryption", ctx, md)
	ret0, _ := ret[0].(TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForMDDecryption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForMDDecryption", arg0, arg1)
}

func (_m *MockKeyManager) GetTLFCryptKeyForBlockDecryption(ctx context.Context, md *RootMetadata, blockPtr BlockPointer) (TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForBlockDecryption", ctx, md, blockPtr)
	ret0, _ := ret[0].(TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForBlockDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForBlockDecryption", arg0, arg1, arg2)
}

func (_m *MockKeyManager) Rekey(ctx context.Context, md *RootMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "Rekey", ctx, md)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) Rekey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rekey", arg0, arg1)
}

// Mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *_MockReporterRecorder
}

// Recorder for MockReporter (not exported)
type _MockReporterRecorder struct {
	mock *MockReporter
}

func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &_MockReporterRecorder{mock}
	return mock
}

func (_m *MockReporter) EXPECT() *_MockReporterRecorder {
	return _m.recorder
}

func (_m *MockReporter) Report(level ReportingLevel, message fmt.Stringer) {
	_m.ctrl.Call(_m, "Report", level, message)
}

func (_mr *_MockReporterRecorder) Report(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Report", arg0, arg1)
}

func (_m *MockReporter) AllKnownErrors() []ReportedError {
	ret := _m.ctrl.Call(_m, "AllKnownErrors")
	ret0, _ := ret[0].([]ReportedError)
	return ret0
}

func (_mr *_MockReporterRecorder) AllKnownErrors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllKnownErrors")
}

// Mock of MDCache interface
type MockMDCache struct {
	ctrl     *gomock.Controller
	recorder *_MockMDCacheRecorder
}

// Recorder for MockMDCache (not exported)
type _MockMDCacheRecorder struct {
	mock *MockMDCache
}

func NewMockMDCache(ctrl *gomock.Controller) *MockMDCache {
	mock := &MockMDCache{ctrl: ctrl}
	mock.recorder = &_MockMDCacheRecorder{mock}
	return mock
}

func (_m *MockMDCache) EXPECT() *_MockMDCacheRecorder {
	return _m.recorder
}

func (_m *MockMDCache) Get(tlf TlfID, rev MetadataRevision, mStatus MergeStatus) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "Get", tlf, rev, mStatus)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDCacheRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockMDCache) Put(md *RootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDCacheRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0)
}

func (_m *MockMDCache) Delete(md *RootMetadata) {
	_m.ctrl.Call(_m, "Delete", md)
}

func (_mr *_MockMDCacheRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

// Mock of KeyCache interface
type MockKeyCache struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyCacheRecorder
}

// Recorder for MockKeyCache (not exported)
type _MockKeyCacheRecorder struct {
	mock *MockKeyCache
}

func NewMockKeyCache(ctrl *gomock.Controller) *MockKeyCache {
	mock := &MockKeyCache{ctrl: ctrl}
	mock.recorder = &_MockKeyCacheRecorder{mock}
	return mock
}

func (_m *MockKeyCache) EXPECT() *_MockKeyCacheRecorder {
	return _m.recorder
}

func (_m *MockKeyCache) GetTLFCryptKey(_param0 TlfID, _param1 KeyGen) (TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKey", _param0, _param1)
	ret0, _ := ret[0].(TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyCacheRecorder) GetTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKey", arg0, arg1)
}

func (_m *MockKeyCache) PutTLFCryptKey(_param0 TlfID, _param1 KeyGen, _param2 TLFCryptKey) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKey", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyCacheRecorder) PutTLFCryptKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKey", arg0, arg1, arg2)
}

// Mock of BlockCache interface
type MockBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockCacheRecorder
}

// Recorder for MockBlockCache (not exported)
type _MockBlockCacheRecorder struct {
	mock *MockBlockCache
}

func NewMockBlockCache(ctrl *gomock.Controller) *MockBlockCache {
	mock := &MockBlockCache{ctrl: ctrl}
	mock.recorder = &_MockBlockCacheRecorder{mock}
	return mock
}

func (_m *MockBlockCache) EXPECT() *_MockBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockBlockCache) Get(ptr BlockPointer, branch BranchName) (Block, error) {
	ret := _m.ctrl.Call(_m, "Get", ptr, branch)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockBlockCache) CheckForKnownPtr(tlf TlfID, block *FileBlock) (BlockPointer, error) {
	ret := _m.ctrl.Call(_m, "CheckForKnownPtr", tlf, block)
	ret0, _ := ret[0].(BlockPointer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) CheckForKnownPtr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForKnownPtr", arg0, arg1)
}

func (_m *MockBlockCache) Put(ptr BlockPointer, tlf TlfID, block Block) error {
	ret := _m.ctrl.Call(_m, "Put", ptr, tlf, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockBlockCache) PutDirty(ptr BlockPointer, branch BranchName, block Block) error {
	ret := _m.ctrl.Call(_m, "PutDirty", ptr, branch, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) PutDirty(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutDirty", arg0, arg1, arg2)
}

func (_m *MockBlockCache) Delete(id BlockID) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockBlockCache) DeleteDirty(ptr BlockPointer, branch BranchName) error {
	ret := _m.ctrl.Call(_m, "DeleteDirty", ptr, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeleteDirty(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDirty", arg0, arg1)
}

func (_m *MockBlockCache) IsDirty(ptr BlockPointer, branch BranchName) bool {
	ret := _m.ctrl.Call(_m, "IsDirty", ptr, branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) IsDirty(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDirty", arg0, arg1)
}

// Mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *_MockCryptoRecorder
}

// Recorder for MockCrypto (not exported)
type _MockCryptoRecorder struct {
	mock *MockCrypto
}

func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &_MockCryptoRecorder{mock}
	return mock
}

func (_m *MockCrypto) EXPECT() *_MockCryptoRecorder {
	return _m.recorder
}

func (_m *MockCrypto) MakeRandomTlfID(isPublic bool) (TlfID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTlfID", isPublic)
	ret0, _ := ret[0].(TlfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomTlfID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTlfID", arg0)
}

func (_m *MockCrypto) MakeMdID(md *RootMetadata) (MdID, error) {
	ret := _m.ctrl.Call(_m, "MakeMdID", md)
	ret0, _ := ret[0].(MdID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeMdID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMdID", arg0)
}

func (_m *MockCrypto) MakeTemporaryBlockID() (BlockID, error) {
	ret := _m.ctrl.Call(_m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeTemporaryBlockID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTemporaryBlockID")
}

func (_m *MockCrypto) MakePermanentBlockID(encodedEncryptedData []byte) (BlockID, error) {
	ret := _m.ctrl.Call(_m, "MakePermanentBlockID", encodedEncryptedData)
	ret0, _ := ret[0].(BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakePermanentBlockID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakePermanentBlockID", arg0)
}

func (_m *MockCrypto) VerifyBlockID(encodedEncryptedData []byte, id BlockID) error {
	ret := _m.ctrl.Call(_m, "VerifyBlockID", encodedEncryptedData, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyBlockID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyBlockID", arg0, arg1)
}

func (_m *MockCrypto) MakeBlockRefNonce() (BlockRefNonce, error) {
	ret := _m.ctrl.Call(_m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(BlockRefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeBlockRefNonce() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBlockRefNonce")
}

func (_m *MockCrypto) MakeRandomTLFKeys() (TLFPublicKey, TLFPrivateKey, TLFEphemeralPublicKey, TLFEphemeralPrivateKey, TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(TLFPublicKey)
	ret1, _ := ret[1].(TLFPrivateKey)
	ret2, _ := ret[2].(TLFEphemeralPublicKey)
	ret3, _ := ret[3].(TLFEphemeralPrivateKey)
	ret4, _ := ret[4].(TLFCryptKey)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFKeys")
}

func (_m *MockCrypto) MakeRandomTLFCryptKeyServerHalf() (TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFCryptKeyServerHalf")
}

func (_m *MockCrypto) MakeRandomBlockCryptKeyServerHalf() (BlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(BlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBlockCryptKeyServerHalf")
}

func (_m *MockCrypto) MaskTLFCryptKey(serverHalf TLFCryptKeyServerHalf, key TLFCryptKey) (TLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "MaskTLFCryptKey", serverHalf, key)
	ret0, _ := ret[0].(TLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MaskTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaskTLFCryptKey", arg0, arg1)
}

func (_m *MockCrypto) UnmaskTLFCryptKey(serverHalf TLFCryptKeyServerHalf, clientHalf TLFCryptKeyClientHalf) (TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "UnmaskTLFCryptKey", serverHalf, clientHalf)
	ret0, _ := ret[0].(TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) UnmaskTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmaskTLFCryptKey", arg0, arg1)
}

func (_m *MockCrypto) UnmaskBlockCryptKey(serverHalf BlockCryptKeyServerHalf, tlfCryptKey TLFCryptKey) (BlockCryptKey, error) {
	ret := _m.ctrl.Call(_m, "UnmaskBlockCryptKey", serverHalf, tlfCryptKey)
	ret0, _ := ret[0].(BlockCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) UnmaskBlockCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmaskBlockCryptKey", arg0, arg1)
}

func (_m *MockCrypto) Sign(ctx context.Context, msg []byte) (SignatureInfo, error) {
	ret := _m.ctrl.Call(_m, "Sign", ctx, msg)
	ret0, _ := ret[0].(SignatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sign", arg0, arg1)
}

func (_m *MockCrypto) Verify(msg []byte, sigInfo SignatureInfo) error {
	ret := _m.ctrl.Call(_m, "Verify", msg, sigInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Verify", arg0, arg1)
}

func (_m *MockCrypto) EncryptTLFCryptKeyClientHalf(privateKey TLFEphemeralPrivateKey, publicKey CryptPublicKey, clientHalf TLFCryptKeyClientHalf) (EncryptedTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(EncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockCrypto) DecryptTLFCryptKeyClientHalf(ctx context.Context, publicKey TLFEphemeralPublicKey, encryptedClientHalf EncryptedTLFCryptKeyClientHalf) (TLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeyClientHalf", ctx, publicKey, encryptedClientHalf)
	ret0, _ := ret[0].(TLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockCrypto) GetTLFCryptKeyServerHalfID(user protocol.UID, deviceKID protocol.KID, serverHalf TLFCryptKeyServerHalf) (TLFCryptKeyServerHalfID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalfID", user, deviceKID, serverHalf)
	ret0, _ := ret[0].(TLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) GetTLFCryptKeyServerHalfID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalfID", arg0, arg1, arg2)
}

func (_m *MockCrypto) VerifyTLFCryptKeyServerHalfID(serverHalfID TLFCryptKeyServerHalfID, user protocol.UID, deviceKID protocol.KID, serverHalf TLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, deviceKID, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyTLFCryptKeyServerHalfID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyTLFCryptKeyServerHalfID", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) EncryptPrivateMetadata(pmd *PrivateMetadata, key TLFCryptKey) (EncryptedPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(EncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptPrivateMetadata", arg0, arg1)
}

func (_m *MockCrypto) DecryptPrivateMetadata(encryptedPMD EncryptedPrivateMetadata, key TLFCryptKey) (*PrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(*PrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptPrivateMetadata", arg0, arg1)
}

func (_m *MockCrypto) EncryptBlock(block Block, key BlockCryptKey) (int, EncryptedBlock, error) {
	ret := _m.ctrl.Call(_m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(EncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCryptoRecorder) EncryptBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptBlock", arg0, arg1)
}

func (_m *MockCrypto) DecryptBlock(encryptedBlock EncryptedBlock, key BlockCryptKey, block Block) error {
	ret := _m.ctrl.Call(_m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) DecryptBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptBlock", arg0, arg1, arg2)
}

// Mock of Codec interface
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *_MockCodecRecorder
}

// Recorder for MockCodec (not exported)
type _MockCodecRecorder struct {
	mock *MockCodec
}

func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &_MockCodecRecorder{mock}
	return mock
}

func (_m *MockCodec) EXPECT() *_MockCodecRecorder {
	return _m.recorder
}

func (_m *MockCodec) Decode(buf []byte, obj interface{}) error {
	ret := _m.ctrl.Call(_m, "Decode", buf, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCodecRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decode", arg0, arg1)
}

func (_m *MockCodec) Encode(obj interface{}) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Encode", obj)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodecRecorder) Encode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0)
}

func (_m *MockCodec) RegisterType(rt reflect.Type, code extCode) {
	_m.ctrl.Call(_m, "RegisterType", rt, code)
}

func (_mr *_MockCodecRecorder) RegisterType(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterType", arg0, arg1)
}

func (_m *MockCodec) RegisterIfaceSliceType(rt reflect.Type, code extCode, typer func(interface{}) reflect.Value) {
	_m.ctrl.Call(_m, "RegisterIfaceSliceType", rt, code, typer)
}

func (_mr *_MockCodecRecorder) RegisterIfaceSliceType(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterIfaceSliceType", arg0, arg1, arg2)
}

// Mock of MDOps interface
type MockMDOps struct {
	ctrl     *gomock.Controller
	recorder *_MockMDOpsRecorder
}

// Recorder for MockMDOps (not exported)
type _MockMDOpsRecorder struct {
	mock *MockMDOps
}

func NewMockMDOps(ctrl *gomock.Controller) *MockMDOps {
	mock := &MockMDOps{ctrl: ctrl}
	mock.recorder = &_MockMDOpsRecorder{mock}
	return mock
}

func (_m *MockMDOps) EXPECT() *_MockMDOpsRecorder {
	return _m.recorder
}

func (_m *MockMDOps) GetForHandle(ctx context.Context, handle *TlfHandle) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetForHandle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1)
}

func (_m *MockMDOps) GetUnmergedForHandle(ctx context.Context, handle *TlfHandle) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedForHandle", ctx, handle)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedForHandle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedForHandle", arg0, arg1)
}

func (_m *MockMDOps) GetForTLF(ctx context.Context, id TlfID) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1)
}

func (_m *MockMDOps) GetUnmergedForTLF(ctx context.Context, id TlfID) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedForTLF", ctx, id)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedForTLF", arg0, arg1)
}

func (_m *MockMDOps) GetRange(ctx context.Context, id TlfID, start MetadataRevision, stop MetadataRevision) ([]*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, start, stop)
	ret0, _ := ret[0].([]*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3)
}

func (_m *MockMDOps) GetUnmergedRange(ctx context.Context, id TlfID, start MetadataRevision, stop MetadataRevision) ([]*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedRange", ctx, id, start, stop)
	ret0, _ := ret[0].([]*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedRange", arg0, arg1, arg2, arg3)
}

func (_m *MockMDOps) Put(ctx context.Context, rmd *RootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDOpsRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockMDOps) PutUnmerged(ctx context.Context, rmd *RootMetadata) error {
	ret := _m.ctrl.Call(_m, "PutUnmerged", ctx, rmd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDOpsRecorder) PutUnmerged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutUnmerged", arg0, arg1)
}

// Mock of KeyOps interface
type MockKeyOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyOpsRecorder
}

// Recorder for MockKeyOps (not exported)
type _MockKeyOpsRecorder struct {
	mock *MockKeyOps
}

func NewMockKeyOps(ctrl *gomock.Controller) *MockKeyOps {
	mock := &MockKeyOps{ctrl: ctrl}
	mock.recorder = &_MockKeyOpsRecorder{mock}
	return mock
}

func (_m *MockKeyOps) EXPECT() *_MockKeyOpsRecorder {
	return _m.recorder
}

func (_m *MockKeyOps) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID TLFCryptKeyServerHalfID) (TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID)
	ret0, _ := ret[0].(TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetTLFCryptKeyServerHalf(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalf", arg0, arg1)
}

func (_m *MockKeyOps) PutTLFCryptKeyServerHalves(ctx context.Context, serverKeyHalves map[protocol.UID]map[protocol.KID]TLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKeyServerHalves", ctx, serverKeyHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) PutTLFCryptKeyServerHalves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKeyServerHalves", arg0, arg1)
}

// Mock of BlockOps interface
type MockBlockOps struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockOpsRecorder
}

// Recorder for MockBlockOps (not exported)
type _MockBlockOpsRecorder struct {
	mock *MockBlockOps
}

func NewMockBlockOps(ctrl *gomock.Controller) *MockBlockOps {
	mock := &MockBlockOps{ctrl: ctrl}
	mock.recorder = &_MockBlockOpsRecorder{mock}
	return mock
}

func (_m *MockBlockOps) EXPECT() *_MockBlockOpsRecorder {
	return _m.recorder
}

func (_m *MockBlockOps) Get(ctx context.Context, md *RootMetadata, blockPtr BlockPointer, block Block) error {
	ret := _m.ctrl.Call(_m, "Get", ctx, md, blockPtr, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockOps) Ready(ctx context.Context, md *RootMetadata, block Block) (BlockID, int, ReadyBlockData, error) {
	ret := _m.ctrl.Call(_m, "Ready", ctx, md, block)
	ret0, _ := ret[0].(BlockID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(ReadyBlockData)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockBlockOpsRecorder) Ready(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ready", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Put(ctx context.Context, md *RootMetadata, blockPtr BlockPointer, readyBlockData ReadyBlockData) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, md, blockPtr, readyBlockData)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockOps) Delete(ctx context.Context, md *RootMetadata, id BlockID, context BlockContext) error {
	ret := _m.ctrl.Call(_m, "Delete", ctx, md, id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2, arg3)
}

// Mock of MDServer interface
type MockMDServer struct {
	ctrl     *gomock.Controller
	recorder *_MockMDServerRecorder
}

// Recorder for MockMDServer (not exported)
type _MockMDServerRecorder struct {
	mock *MockMDServer
}

func NewMockMDServer(ctrl *gomock.Controller) *MockMDServer {
	mock := &MockMDServer{ctrl: ctrl}
	mock.recorder = &_MockMDServerRecorder{mock}
	return mock
}

func (_m *MockMDServer) EXPECT() *_MockMDServerRecorder {
	return _m.recorder
}

func (_m *MockMDServer) GetForHandle(ctx context.Context, handle *TlfHandle, mStatus MergeStatus) (TlfID, *RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(TlfID)
	ret1, _ := ret[1].(*RootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMDServerRecorder) GetForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1, arg2)
}

func (_m *MockMDServer) GetForTLF(ctx context.Context, id TlfID, mStatus MergeStatus) (*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id, mStatus)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetForTLF(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1, arg2)
}

func (_m *MockMDServer) GetRange(ctx context.Context, id TlfID, mStatus MergeStatus, start MetadataRevision, stop MetadataRevision) ([]*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, mStatus, start, stop)
	ret0, _ := ret[0].([]*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetRange(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMDServer) Put(ctx context.Context, rmds *RootMetadataSigned) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmds)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockMDServer) PruneUnmerged(ctx context.Context, id TlfID) error {
	ret := _m.ctrl.Call(_m, "PruneUnmerged", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) PruneUnmerged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PruneUnmerged", arg0, arg1)
}

func (_m *MockMDServer) RegisterForUpdate(ctx context.Context, id TlfID, currHead MetadataRevision) (<-chan error, error) {
	ret := _m.ctrl.Call(_m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) RegisterForUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForUpdate", arg0, arg1, arg2)
}

func (_m *MockMDServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockMDServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of BlockServer interface
type MockBlockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockServerRecorder
}

// Recorder for MockBlockServer (not exported)
type _MockBlockServerRecorder struct {
	mock *MockBlockServer
}

func NewMockBlockServer(ctrl *gomock.Controller) *MockBlockServer {
	mock := &MockBlockServer{ctrl: ctrl}
	mock.recorder = &_MockBlockServerRecorder{mock}
	return mock
}

func (_m *MockBlockServer) EXPECT() *_MockBlockServerRecorder {
	return _m.recorder
}

func (_m *MockBlockServer) Get(ctx context.Context, id BlockID, context BlockContext) ([]byte, BlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, id, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBlockServerRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockBlockServer) Put(ctx context.Context, id BlockID, tlfID TlfID, context BlockContext, buf []byte, serverHalf BlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, id, tlfID, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) Put(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockBlockServer) AddBlockReference(ctx context.Context, id BlockID, tlfID TlfID, context BlockContext) error {
	ret := _m.ctrl.Call(_m, "AddBlockReference", ctx, id, tlfID, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) AddBlockReference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddBlockReference", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockServer) RemoveBlockReference(ctx context.Context, id BlockID, tlfID TlfID, context BlockContext) error {
	ret := _m.ctrl.Call(_m, "RemoveBlockReference", ctx, id, tlfID, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) RemoveBlockReference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBlockReference", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockBlockServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of BlockSplitter interface
type MockBlockSplitter struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockSplitterRecorder
}

// Recorder for MockBlockSplitter (not exported)
type _MockBlockSplitterRecorder struct {
	mock *MockBlockSplitter
}

func NewMockBlockSplitter(ctrl *gomock.Controller) *MockBlockSplitter {
	mock := &MockBlockSplitter{ctrl: ctrl}
	mock.recorder = &_MockBlockSplitterRecorder{mock}
	return mock
}

func (_m *MockBlockSplitter) EXPECT() *_MockBlockSplitterRecorder {
	return _m.recorder
}

func (_m *MockBlockSplitter) CopyUntilSplit(block *FileBlock, lastBlock bool, data []byte, off int64) int64 {
	ret := _m.ctrl.Call(_m, "CopyUntilSplit", block, lastBlock, data, off)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CopyUntilSplit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopyUntilSplit", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockSplitter) CheckSplit(block *FileBlock) int64 {
	ret := _m.ctrl.Call(_m, "CheckSplit", block)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CheckSplit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckSplit", arg0)
}

func (_m *MockBlockSplitter) ShouldEmbedBlockChanges(bc *BlockChanges) bool {
	ret := _m.ctrl.Call(_m, "ShouldEmbedBlockChanges", bc)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) ShouldEmbedBlockChanges(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldEmbedBlockChanges", arg0)
}

// Mock of KeyServer interface
type MockKeyServer struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyServerRecorder
}

// Recorder for MockKeyServer (not exported)
type _MockKeyServerRecorder struct {
	mock *MockKeyServer
}

func NewMockKeyServer(ctrl *gomock.Controller) *MockKeyServer {
	mock := &MockKeyServer{ctrl: ctrl}
	mock.recorder = &_MockKeyServerRecorder{mock}
	return mock
}

func (_m *MockKeyServer) EXPECT() *_MockKeyServerRecorder {
	return _m.recorder
}

func (_m *MockKeyServer) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID TLFCryptKeyServerHalfID) (TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID)
	ret0, _ := ret[0].(TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyServerRecorder) GetTLFCryptKeyServerHalf(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalf", arg0, arg1)
}

func (_m *MockKeyServer) PutTLFCryptKeyServerHalves(ctx context.Context, serverKeyHalves map[protocol.UID]map[protocol.KID]TLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKeyServerHalves", ctx, serverKeyHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) PutTLFCryptKeyServerHalves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKeyServerHalves", arg0, arg1)
}

func (_m *MockKeyServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKeyServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *_MockObserverRecorder
}

// Recorder for MockObserver (not exported)
type _MockObserverRecorder struct {
	mock *MockObserver
}

func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &_MockObserverRecorder{mock}
	return mock
}

func (_m *MockObserver) EXPECT() *_MockObserverRecorder {
	return _m.recorder
}

func (_m *MockObserver) LocalChange(ctx context.Context, node Node, write WriteRange) {
	_m.ctrl.Call(_m, "LocalChange", ctx, node, write)
}

func (_mr *_MockObserverRecorder) LocalChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LocalChange", arg0, arg1, arg2)
}

func (_m *MockObserver) BatchChanges(ctx context.Context, changes []NodeChange) {
	_m.ctrl.Call(_m, "BatchChanges", ctx, changes)
}

func (_mr *_MockObserverRecorder) BatchChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchChanges", arg0, arg1)
}

// Mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *_MockNotifierRecorder
}

// Recorder for MockNotifier (not exported)
type _MockNotifierRecorder struct {
	mock *MockNotifier
}

func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &_MockNotifierRecorder{mock}
	return mock
}

func (_m *MockNotifier) EXPECT() *_MockNotifierRecorder {
	return _m.recorder
}

func (_m *MockNotifier) RegisterForChanges(folderBranches []FolderBranch, obs Observer) error {
	ret := _m.ctrl.Call(_m, "RegisterForChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) RegisterForChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForChanges", arg0, arg1)
}

func (_m *MockNotifier) UnregisterFromChanges(folderBranches []FolderBranch, obs Observer) error {
	ret := _m.ctrl.Call(_m, "UnregisterFromChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) UnregisterFromChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnregisterFromChanges", arg0, arg1)
}

// Mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockConfigRecorder
}

// Recorder for MockConfig (not exported)
type _MockConfigRecorder struct {
	mock *MockConfig
}

func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &_MockConfigRecorder{mock}
	return mock
}

func (_m *MockConfig) EXPECT() *_MockConfigRecorder {
	return _m.recorder
}

func (_m *MockConfig) KBFSOps() KBFSOps {
	ret := _m.ctrl.Call(_m, "KBFSOps")
	ret0, _ := ret[0].(KBFSOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KBFSOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBFSOps")
}

func (_m *MockConfig) SetKBFSOps(_param0 KBFSOps) {
	_m.ctrl.Call(_m, "SetKBFSOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKBFSOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBFSOps", arg0)
}

func (_m *MockConfig) KBPKI() KBPKI {
	ret := _m.ctrl.Call(_m, "KBPKI")
	ret0, _ := ret[0].(KBPKI)
	return ret0
}

func (_mr *_MockConfigRecorder) KBPKI() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBPKI")
}

func (_m *MockConfig) SetKBPKI(_param0 KBPKI) {
	_m.ctrl.Call(_m, "SetKBPKI", _param0)
}

func (_mr *_MockConfigRecorder) SetKBPKI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBPKI", arg0)
}

func (_m *MockConfig) KeyManager() KeyManager {
	ret := _m.ctrl.Call(_m, "KeyManager")
	ret0, _ := ret[0].(KeyManager)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyManager")
}

func (_m *MockConfig) SetKeyManager(_param0 KeyManager) {
	_m.ctrl.Call(_m, "SetKeyManager", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyManager", arg0)
}

func (_m *MockConfig) Reporter() Reporter {
	ret := _m.ctrl.Call(_m, "Reporter")
	ret0, _ := ret[0].(Reporter)
	return ret0
}

func (_mr *_MockConfigRecorder) Reporter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reporter")
}

func (_m *MockConfig) SetReporter(_param0 Reporter) {
	_m.ctrl.Call(_m, "SetReporter", _param0)
}

func (_mr *_MockConfigRecorder) SetReporter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReporter", arg0)
}

func (_m *MockConfig) MDCache() MDCache {
	ret := _m.ctrl.Call(_m, "MDCache")
	ret0, _ := ret[0].(MDCache)
	return ret0
}

func (_mr *_MockConfigRecorder) MDCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDCache")
}

func (_m *MockConfig) SetMDCache(_param0 MDCache) {
	_m.ctrl.Call(_m, "SetMDCache", _param0)
}

func (_mr *_MockConfigRecorder) SetMDCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDCache", arg0)
}

func (_m *MockConfig) KeyCache() KeyCache {
	ret := _m.ctrl.Call(_m, "KeyCache")
	ret0, _ := ret[0].(KeyCache)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyCache")
}

func (_m *MockConfig) SetKeyCache(_param0 KeyCache) {
	_m.ctrl.Call(_m, "SetKeyCache", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyCache", arg0)
}

func (_m *MockConfig) BlockCache() BlockCache {
	ret := _m.ctrl.Call(_m, "BlockCache")
	ret0, _ := ret[0].(BlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockCache")
}

func (_m *MockConfig) SetBlockCache(_param0 BlockCache) {
	_m.ctrl.Call(_m, "SetBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockCache", arg0)
}

func (_m *MockConfig) Crypto() Crypto {
	ret := _m.ctrl.Call(_m, "Crypto")
	ret0, _ := ret[0].(Crypto)
	return ret0
}

func (_mr *_MockConfigRecorder) Crypto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Crypto")
}

func (_m *MockConfig) SetCrypto(_param0 Crypto) {
	_m.ctrl.Call(_m, "SetCrypto", _param0)
}

func (_mr *_MockConfigRecorder) SetCrypto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCrypto", arg0)
}

func (_m *MockConfig) Codec() Codec {
	ret := _m.ctrl.Call(_m, "Codec")
	ret0, _ := ret[0].(Codec)
	return ret0
}

func (_mr *_MockConfigRecorder) Codec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Codec")
}

func (_m *MockConfig) SetCodec(_param0 Codec) {
	_m.ctrl.Call(_m, "SetCodec", _param0)
}

func (_mr *_MockConfigRecorder) SetCodec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCodec", arg0)
}

func (_m *MockConfig) MDOps() MDOps {
	ret := _m.ctrl.Call(_m, "MDOps")
	ret0, _ := ret[0].(MDOps)
	return ret0
}

func (_mr *_MockConfigRecorder) MDOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDOps")
}

func (_m *MockConfig) SetMDOps(_param0 MDOps) {
	_m.ctrl.Call(_m, "SetMDOps", _param0)
}

func (_mr *_MockConfigRecorder) SetMDOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDOps", arg0)
}

func (_m *MockConfig) KeyOps() KeyOps {
	ret := _m.ctrl.Call(_m, "KeyOps")
	ret0, _ := ret[0].(KeyOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyOps")
}

func (_m *MockConfig) SetKeyOps(_param0 KeyOps) {
	_m.ctrl.Call(_m, "SetKeyOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyOps", arg0)
}

func (_m *MockConfig) BlockOps() BlockOps {
	ret := _m.ctrl.Call(_m, "BlockOps")
	ret0, _ := ret[0].(BlockOps)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockOps")
}

func (_m *MockConfig) SetBlockOps(_param0 BlockOps) {
	_m.ctrl.Call(_m, "SetBlockOps", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockOps", arg0)
}

func (_m *MockConfig) MDServer() MDServer {
	ret := _m.ctrl.Call(_m, "MDServer")
	ret0, _ := ret[0].(MDServer)
	return ret0
}

func (_mr *_MockConfigRecorder) MDServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDServer")
}

func (_m *MockConfig) SetMDServer(_param0 MDServer) {
	_m.ctrl.Call(_m, "SetMDServer", _param0)
}

func (_mr *_MockConfigRecorder) SetMDServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDServer", arg0)
}

func (_m *MockConfig) BlockServer() BlockServer {
	ret := _m.ctrl.Call(_m, "BlockServer")
	ret0, _ := ret[0].(BlockServer)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockServer")
}

func (_m *MockConfig) SetBlockServer(_param0 BlockServer) {
	_m.ctrl.Call(_m, "SetBlockServer", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockServer", arg0)
}

func (_m *MockConfig) KeyServer() KeyServer {
	ret := _m.ctrl.Call(_m, "KeyServer")
	ret0, _ := ret[0].(KeyServer)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyServer")
}

func (_m *MockConfig) SetKeyServer(_param0 KeyServer) {
	_m.ctrl.Call(_m, "SetKeyServer", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyServer", arg0)
}

func (_m *MockConfig) KeybaseDaemon() KeybaseDaemon {
	ret := _m.ctrl.Call(_m, "KeybaseDaemon")
	ret0, _ := ret[0].(KeybaseDaemon)
	return ret0
}

func (_mr *_MockConfigRecorder) KeybaseDaemon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeybaseDaemon")
}

func (_m *MockConfig) SetKeybaseDaemon(_param0 KeybaseDaemon) {
	_m.ctrl.Call(_m, "SetKeybaseDaemon", _param0)
}

func (_mr *_MockConfigRecorder) SetKeybaseDaemon(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeybaseDaemon", arg0)
}

func (_m *MockConfig) BlockSplitter() BlockSplitter {
	ret := _m.ctrl.Call(_m, "BlockSplitter")
	ret0, _ := ret[0].(BlockSplitter)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockSplitter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSplitter")
}

func (_m *MockConfig) SetBlockSplitter(_param0 BlockSplitter) {
	_m.ctrl.Call(_m, "SetBlockSplitter", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockSplitter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockSplitter", arg0)
}

func (_m *MockConfig) Notifier() Notifier {
	ret := _m.ctrl.Call(_m, "Notifier")
	ret0, _ := ret[0].(Notifier)
	return ret0
}

func (_mr *_MockConfigRecorder) Notifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notifier")
}

func (_m *MockConfig) SetNotifier(_param0 Notifier) {
	_m.ctrl.Call(_m, "SetNotifier", _param0)
}

func (_mr *_MockConfigRecorder) SetNotifier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNotifier", arg0)
}

func (_m *MockConfig) DataVersion() DataVer {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

func (_mr *_MockConfigRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

func (_m *MockConfig) ReqsBufSize() int {
	ret := _m.ctrl.Call(_m, "ReqsBufSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockConfigRecorder) ReqsBufSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReqsBufSize")
}

func (_m *MockConfig) RootCerts() []byte {
	ret := _m.ctrl.Call(_m, "RootCerts")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockConfigRecorder) RootCerts() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RootCerts")
}

func (_m *MockConfig) SetRootCerts(_param0 []byte) {
	_m.ctrl.Call(_m, "SetRootCerts", _param0)
}

func (_mr *_MockConfigRecorder) SetRootCerts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRootCerts", arg0)
}

func (_m *MockConfig) MakeLogger(module string) logger.Logger {
	ret := _m.ctrl.Call(_m, "MakeLogger", module)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

func (_mr *_MockConfigRecorder) MakeLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeLogger", arg0)
}

func (_m *MockConfig) SetLoggerMaker(_param0 func(string) logger.Logger) {
	_m.ctrl.Call(_m, "SetLoggerMaker", _param0)
}

func (_mr *_MockConfigRecorder) SetLoggerMaker(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoggerMaker", arg0)
}

func (_m *MockConfig) MetricsRegistry() go_metrics.Registry {
	ret := _m.ctrl.Call(_m, "MetricsRegistry")
	ret0, _ := ret[0].(go_metrics.Registry)
	return ret0
}

func (_mr *_MockConfigRecorder) MetricsRegistry() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetricsRegistry")
}

func (_m *MockConfig) SetMetricsRegistry(_param0 go_metrics.Registry) {
	_m.ctrl.Call(_m, "SetMetricsRegistry", _param0)
}

func (_mr *_MockConfigRecorder) SetMetricsRegistry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMetricsRegistry", arg0)
}

func (_m *MockConfig) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockConfigRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of NodeCache interface
type MockNodeCache struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeCacheRecorder
}

// Recorder for MockNodeCache (not exported)
type _MockNodeCacheRecorder struct {
	mock *MockNodeCache
}

func NewMockNodeCache(ctrl *gomock.Controller) *MockNodeCache {
	mock := &MockNodeCache{ctrl: ctrl}
	mock.recorder = &_MockNodeCacheRecorder{mock}
	return mock
}

func (_m *MockNodeCache) EXPECT() *_MockNodeCacheRecorder {
	return _m.recorder
}

func (_m *MockNodeCache) GetOrCreate(ptr BlockPointer, name string, parent Node) (Node, error) {
	ret := _m.ctrl.Call(_m, "GetOrCreate", ptr, name, parent)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeCacheRecorder) GetOrCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOrCreate", arg0, arg1, arg2)
}

func (_m *MockNodeCache) Get(ptr BlockPointer) Node {
	ret := _m.ctrl.Call(_m, "Get", ptr)
	ret0, _ := ret[0].(Node)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockNodeCache) UpdatePointer(oldPtr BlockPointer, newPtr BlockPointer) {
	_m.ctrl.Call(_m, "UpdatePointer", oldPtr, newPtr)
}

func (_mr *_MockNodeCacheRecorder) UpdatePointer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePointer", arg0, arg1)
}

func (_m *MockNodeCache) Move(ptr BlockPointer, newParent Node, newName string) error {
	ret := _m.ctrl.Call(_m, "Move", ptr, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) Move(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Move", arg0, arg1, arg2)
}

func (_m *MockNodeCache) Unlink(ptr BlockPointer, oldPath path) {
	_m.ctrl.Call(_m, "Unlink", ptr, oldPath)
}

func (_mr *_MockNodeCacheRecorder) Unlink(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlink", arg0, arg1)
}

func (_m *MockNodeCache) PathFromNode(node Node) path {
	ret := _m.ctrl.Call(_m, "PathFromNode", node)
	ret0, _ := ret[0].(path)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) PathFromNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PathFromNode", arg0)
}

// Mock of ConnectionTransport interface
type MockConnectionTransport struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectionTransportRecorder
}

// Recorder for MockConnectionTransport (not exported)
type _MockConnectionTransportRecorder struct {
	mock *MockConnectionTransport
}

func NewMockConnectionTransport(ctrl *gomock.Controller) *MockConnectionTransport {
	mock := &MockConnectionTransport{ctrl: ctrl}
	mock.recorder = &_MockConnectionTransportRecorder{mock}
	return mock
}

func (_m *MockConnectionTransport) EXPECT() *_MockConnectionTransportRecorder {
	return _m.recorder
}

func (_m *MockConnectionTransport) Dial(ctx context.Context, srvAddr string) (protocol.GenericClient, error) {
	ret := _m.ctrl.Call(_m, "Dial", ctx, srvAddr)
	ret0, _ := ret[0].(protocol.GenericClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnectionTransportRecorder) Dial(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dial", arg0, arg1)
}

func (_m *MockConnectionTransport) Serve(server rpc2.Protocol) error {
	ret := _m.ctrl.Call(_m, "Serve", server)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnectionTransportRecorder) Serve(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Serve", arg0)
}

func (_m *MockConnectionTransport) IsConnected() bool {
	ret := _m.ctrl.Call(_m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConnectionTransportRecorder) IsConnected() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsConnected")
}

func (_m *MockConnectionTransport) Finalize() {
	_m.ctrl.Call(_m, "Finalize")
}

func (_mr *_MockConnectionTransportRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize")
}

func (_m *MockConnectionTransport) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockConnectionTransportRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
